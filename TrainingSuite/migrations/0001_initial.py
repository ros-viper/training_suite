# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-03-18 10:47
from __future__ import unicode_literals

import TrainingSuite.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(max_length=300)),
                ('target_line', models.IntegerField(default=-1, help_text='Target line, -1 for OVERALL comment')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('start_date', models.DateField(blank=True)),
                ('end_date', models.DateField(blank=True)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_type', models.CharField(blank=True, choices=[('PDF', 'PDF file'), ('DOC', 'Word document'), ('PPT', 'Powerpoint presentation'), ('EBOOK', 'Ebook file'), ('URL', 'Link to resource in Web')], max_length=5)),
                ('physical_location', models.FileField(upload_to=TrainingSuite.models.Resource.get_resource_path)),
                ('filename', models.CharField(max_length=100)),
                ('comment', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('description', models.CharField(default='', max_length=300)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TrainingSuite.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=3000)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('is_trainer', models.BooleanField(default=TrainingSuite.models.Person.get_is_trainer)),
                ('comments', models.ManyToManyField(to='TrainingSuite.Comment')),
                ('courses', models.ManyToManyField(to='TrainingSuite.Course')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Home Task', max_length=100)),
                ('content', models.TextField(max_length=1000)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TrainingSuite.Session')),
            ],
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('is_trainer', models.BooleanField(default=TrainingSuite.models.Person.get_is_trainer)),
                ('comments', models.ManyToManyField(to='TrainingSuite.Comment')),
                ('courses', models.ManyToManyField(to='TrainingSuite.Course')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='solution',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TrainingSuite.Student'),
        ),
        migrations.AddField(
            model_name='solution',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TrainingSuite.Task'),
        ),
        migrations.AddField(
            model_name='resource',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TrainingSuite.Session'),
        ),
        migrations.AddField(
            model_name='course',
            name='trainers',
            field=models.ManyToManyField(to='TrainingSuite.Trainer'),
        ),
        migrations.AddField(
            model_name='comment',
            name='author_student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TrainingSuite.Student'),
        ),
        migrations.AddField(
            model_name='comment',
            name='author_trainer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TrainingSuite.Trainer'),
        ),
        migrations.AddField(
            model_name='comment',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TrainingSuite.Solution'),
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together=set([('number', 'course')]),
        ),
    ]
